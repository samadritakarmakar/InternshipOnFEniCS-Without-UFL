#!/usr/bin/env python
# Copyright (C) 2009-2011 Kristian B. Oelgaard and Garth N. Wells.
# Licensed under the GNU LGPL Version 3.
 
from ufl import * 
 
scheme = "default"
degree = 3
dx = Measure("dx")
dx = dx(degree=degree, scheme=scheme)

elementA = VectorElement("Lagrange", tetrahedron, 2)
elementT = VectorElement("Quadrature", tetrahedron, degree, dim=36,
                         quad_scheme=scheme)
elementS = VectorElement("Quadrature", tetrahedron, degree, dim=6,
                         quad_scheme=scheme)

v = TestFunction(elementA)
u = TrialFunction(elementA)
f = Coefficient(elementA)
t = Coefficient(elementT)
s = Coefficient(elementS)
v_eps = TestFunction(elementS)


# eps_xx, eps_yy, eps_zz, gam_xy, gam_xz, gam_yz
def eps(u):
    return as_vector([u[i].dx(i) for i in range(3)] + [u[i].dx(j) + u[j].dx(i) for i, j in [(0, 1), (0, 2), (1, 2)]])

def sigma(s):
    return as_matrix([[s[0], s[3], s[4]], [s[3], s[1], s[5]], [s[4], s[5], s[2]]])

def tangent(t):
  return as_matrix([[t[i*6 + j] for j in range(6)] for i in range(6)])

eps_form = inner(v_eps, eps(f)) / CellVolume(tetrahedron) * dx
eps_ref_form = inner(v_eps, as_vector([1., 1., 1., 1., 1., 1.])) / CellVolume(tetrahedron) * dx

a = inner(eps(v), dot(tangent(t), eps(u)) )*dx
L = inner(grad(v), sigma(s))*dx - inner(v, f)*dx

#ADDED BY SAM

#Stresses from main.cpp
elementS2 = TensorElement(FiniteElement('Lagrange', tetrahedron, 1), shape=(3, 3), symmetry={})
Strss = TrialFunction(elementS2)
vstrss = TestFunction(elementS2)
fstrss = Coefficient(elementS2)
s2= Coefficient(elementS)
aStrss  = inner(vstrss, Strss)*dx
L_Strss = inner(vstrss, sigma(s2))*dx - inner(vstrss, fstrss)*dx 

#Total Strain from grad u
elementS3 = VectorElement("Lagrange", tetrahedron, 2)
#elementS4 = TensorElement("Lagrange", tetrahedron, 1, shape=(3, 3), symmetry={})
Eps = TrialFunction(elementS2)
vEps = TestFunction(elementS2)
u2 = Coefficient(elementS3)
fEps = Coefficient(elementS2)
aEps = inner(vEps, Eps)*dx
LEps = inner(vEps, 0.5*(grad(u2)+transpose(grad(u2))))*dx - inner(vEps, fEps)*dx

#Plastic Strain from main.cpp
Eps_p = TrialFunction(elementS2)
vEps_p = TestFunction(elementS2)
fEps_p = Coefficient(elementS2)
eps_p= Coefficient(elementS)
aEps_p  = inner(vEps, Eps_p)*dx
LEps_p = inner(vEps_p, sigma(eps_p))*dx - inner(vEps_p, fEps_p)*dx 

E = 200.0e9
nu = 0.3

mu = E / (2.0*(1.0 + nu))
lmbda = E*nu / ((1.0 + nu)*(1.0 - 2.0*nu))

def sigma2(v2,u2):
    return 2.0*mu*(v2) + lmbda*tr(v2)*Identity(u2.geometric_dimension())
    #return 2.0*mu*sym(grad(v2)) + lmbda*tr(sym(grad(v2)))*Identity(v2.geometric_dimension())

#Stress from C:(eps-eps_p)
Strss2 = TrialFunction(elementS2)
aStrss2  = inner(vstrss, Strss2)*dx
eps2=0.5*(grad(u2)+transpose(grad(u2)))
L_Strss2 = inner(vstrss, sigma2(eps2-sigma(eps_p),u2))*dx - inner(vstrss, fstrss)*dx 

forms = [eps_form, eps_ref_form, a, L, aStrss, L_Strss, aEps, LEps, aEps_p, LEps_p, aStrss2, L_Strss2]
